name: Yocto Build with Docker

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Custom Layer
        uses: actions/checkout@v4

      - name: Install repo
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          export PATH=${PATH}:~/.bin
          echo "PATH=$PATH" >> $GITHUB_ENV

      # Restore repo cache before syncing
      - name: Restore repo cache
        uses: actions/cache@v3
        with:
          path: .repo
          key: repo-${{ github.sha }}
          restore-keys: |
            repo-

      - name: Repo init and sync
        run: |
          repo init -u https://github.com/qualcomm-linux/qcom-manifest -b qcom-linux-scarthgap -m qcom-6.6.65-QLI.1.4-Ver.1.1.xml
          repo sync -j$(nproc)

      # Save repo cache after syncing
      - name: Save repo cache
        uses: actions/cache@v3
        with:
          path: .repo
          key: repo-${{ github.sha }}

      - name: Set up Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker image
        run: |
          docker buildx create --use --driver docker-container --driver-opt "network=host" --buildkitd-flags "--debug"
          docker buildx build --load --cache-from=type=local,src=/tmp/.buildx-cache \
                              --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
                              --build-arg userid=$(id -u) \
                              --build-arg groupid=$(id -g) \
                              --build-arg username=$(id -un) \
                              -t yocto-builder \
                              -f docker/Dockerfile docker/

      - name: Run Yocto build inside Docker container
        run: |
          docker run --rm \
            -v "${GITHUB_WORKSPACE}:/app" \
            -w /app \
            yocto-builder \
            bash -c " \
              echo 'In docker bash.' && pwd && ls -l && \
              MACHINE=qcs9100-ride-sx DISTRO=qcom-wayland QCOM_SELECTED_BSP=base source setup-environment && \
              echo 'After source setup-environment' && \
              bitbake-layers add-layer ../meta-myiq9qemu && \
              echo 'Added meta-myiq9qemu layer' && \
              bitbake -f core-image-minimal && \
              echo 'After bitbake' \
            "

      #- name: (Optional) Upload build artifacts
      #  if: always()
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: yocto-build-artifacts
      #    path: build/tmp/deploy/images/*