name: Yocto Build with Docker

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      docker_image_source:
        description: "Choose Docker image source"
        required: true
        default: "self-hosted"
        type: choice
        options:
          - self-hosted
          - build-new
# Test
jobs:
  build:
    #runs-on: ubuntu-latest
    runs-on: [self-hosted, linux, x64]

    steps:
      - name: Clean workspace
        run: git clean -fdx

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize submodules manually
        run: |
          git submodule init
          git submodule update --recursive --depth=1


      - name: Show selected variables
        run: |
          echo "DOCKER_CACHE_VAR: $DOCKER_CACHE_VAR"
          echo "STATE_CACHE_VAR: $STATE_CACHE_VAR"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        env:
          DOCKER_CACHE_VAR: ${{ inputs.docker_image_source }}
          STATE_CACHE_VAR: ${{ inputs.use_cache }}


      - name: Install repo
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          export PATH=${PATH}:~/.bin
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Repo init
        run: |
            repo init -u https://github.com/qualcomm-linux/qcom-manifest -b qcom-linux-scarthgap -m qcom-6.6.90-QLI.1.5-Ver.1.1.xml

      # Restore repo cache before syncing
      - name: Restore repo cache
        uses: actions/cache@v3
        with:
          path: .repo
          key: repo-cache-${{ hashFiles('.repo/manifest.xml') }}

      - name: Repo sync sync
        run: |
          repo sync -j$(nproc)

      # Save repo cache after syncing
      - name: Save repo cache
        uses: actions/cache@v3
        with:
          path: .repo
          key: repo-cache-${{ hashFiles('.repo/manifest.xml') }}

      - name: Set up Docker cache
        if: ${{ inputs.docker_image_source == 'build-new' }}
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-cache-${{ hashFiles('docker/Dockerfile', 'docker/**/*') }}

      - name: Build Docker image
        if: ${{ inputs.docker_image_source == 'build-new' }}
        run: |
          docker buildx create --use --driver docker-container --driver-opt "network=host" --buildkitd-flags "--debug"
          docker buildx build --load --cache-from=type=local,src=/tmp/.buildx-cache \
                              --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
                              --build-arg userid=$(id -u) \
                              --build-arg groupid=$(id -g) \
                              --build-arg username=$(id -un) \
                              -t amito4/yocto-builder \
                              -f docker/Dockerfile docker/

      # Save Docker cache
      - name: Save Docker cache
        if: ${{ inputs.docker_image_source == 'build-new' }}
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-cache-${{ hashFiles('docker/Dockerfile', 'docker/**/*') }}


      - name: Run Yocto build inside Docker container
        run: |
          docker run --rm \
            -v "/home/yocto/cache:/home/yocto/cache" \
            -v "${GITHUB_WORKSPACE}:/app" \
            -w /app \
            amito4/yocto-builder \
            bash -c " \
              echo 'In docker bash.' && pwd && ls -l && \
              MACHINE=qcs9100-ride-sx DISTRO=qcom-wayland QCOM_SELECTED_BSP=base source setup-environment build-qcom-wayland && \
              bitbake core-image-minimal \
            "


      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yocto-build-artifacts
          path: ${{ github.workspace }}/build-qcom-wayland/tmp-glibc/deploy/images
